// Code generated by mockery v2.20.0. DO NOT EDIT.

package improve_post_service

import (
	context "context"
	"github.com/a-novel/agora-backend/domains/bookmark/storage/improve_post"
	"github.com/a-novel/agora-backend/models"

	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Bookmark provides a mock function with given fields: ctx, userID, requestID, target, level, now
func (_m *MockService) Bookmark(ctx context.Context, userID uuid.UUID, requestID uuid.UUID, target models.BookmarkTarget, level models.BookmarkLevel, now time.Time) (*models.Bookmark, error) {
	ret := _m.Called(ctx, userID, requestID, target, level, now)

	var r0 *models.Bookmark
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.BookmarkTarget, models.BookmarkLevel, time.Time) (*models.Bookmark, error)); ok {
		return rf(ctx, userID, requestID, target, level, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.BookmarkTarget, models.BookmarkLevel, time.Time) *models.Bookmark); ok {
		r0 = rf(ctx, userID, requestID, target, level, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Bookmark)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, models.BookmarkTarget, models.BookmarkLevel, time.Time) error); ok {
		r1 = rf(ctx, userID, requestID, target, level, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Bookmark_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bookmark'
type MockService_Bookmark_Call struct {
	*mock.Call
}

// Bookmark is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - requestID uuid.UUID
//   - target BookmarkTarget
//   - level bookmark_service.BookmarkLevel
//   - now time.Time
func (_e *MockService_Expecter) Bookmark(ctx interface{}, userID interface{}, requestID interface{}, target interface{}, level interface{}, now interface{}) *MockService_Bookmark_Call {
	return &MockService_Bookmark_Call{Call: _e.mock.On("Bookmark", ctx, userID, requestID, target, level, now)}
}

func (_c *MockService_Bookmark_Call) Run(run func(ctx context.Context, userID uuid.UUID, requestID uuid.UUID, target models.BookmarkTarget, level models.BookmarkLevel, now time.Time)) *MockService_Bookmark_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(models.BookmarkTarget), args[4].(models.BookmarkLevel), args[5].(time.Time))
	})
	return _c
}

func (_c *MockService_Bookmark_Call) Return(_a0 *models.Bookmark, _a1 error) *MockService_Bookmark_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Bookmark_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, models.BookmarkTarget, models.BookmarkLevel, time.Time) (*models.Bookmark, error)) *MockService_Bookmark_Call {
	_c.Call.Return(run)
	return _c
}

// IsBookmarked provides a mock function with given fields: ctx, userID, requestID, target
func (_m *MockService) IsBookmarked(ctx context.Context, userID uuid.UUID, requestID uuid.UUID, target models.BookmarkTarget) (*models.BookmarkLevel, error) {
	ret := _m.Called(ctx, userID, requestID, target)

	var r0 *models.BookmarkLevel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.BookmarkTarget) (*models.BookmarkLevel, error)); ok {
		return rf(ctx, userID, requestID, target)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.BookmarkTarget) *models.BookmarkLevel); ok {
		r0 = rf(ctx, userID, requestID, target)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BookmarkLevel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, models.BookmarkTarget) error); ok {
		r1 = rf(ctx, userID, requestID, target)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_IsBookmarked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsBookmarked'
type MockService_IsBookmarked_Call struct {
	*mock.Call
}

// IsBookmarked is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - requestID uuid.UUID
//   - target BookmarkTarget
func (_e *MockService_Expecter) IsBookmarked(ctx interface{}, userID interface{}, requestID interface{}, target interface{}) *MockService_IsBookmarked_Call {
	return &MockService_IsBookmarked_Call{Call: _e.mock.On("IsBookmarked", ctx, userID, requestID, target)}
}

func (_c *MockService_IsBookmarked_Call) Run(run func(ctx context.Context, userID uuid.UUID, requestID uuid.UUID, target models.BookmarkTarget)) *MockService_IsBookmarked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(models.BookmarkTarget))
	})
	return _c
}

func (_c *MockService_IsBookmarked_Call) Return(_a0 *models.BookmarkLevel, _a1 error) *MockService_IsBookmarked_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_IsBookmarked_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, models.BookmarkTarget) (*models.BookmarkLevel, error)) *MockService_IsBookmarked_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, userID, level, target, limit, offset
func (_m *MockService) List(ctx context.Context, userID uuid.UUID, level models.BookmarkLevel, target models.BookmarkTarget, limit int, offset int) ([]*models.Bookmark, int64, error) {
	ret := _m.Called(ctx, userID, level, target, limit, offset)

	var r0 []*models.Bookmark
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.BookmarkLevel, models.BookmarkTarget, int, int) ([]*models.Bookmark, int64, error)); ok {
		return rf(ctx, userID, level, target, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.BookmarkLevel, models.BookmarkTarget, int, int) []*models.Bookmark); ok {
		r0 = rf(ctx, userID, level, target, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Bookmark)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.BookmarkLevel, models.BookmarkTarget, int, int) int64); ok {
		r1 = rf(ctx, userID, level, target, limit, offset)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, models.BookmarkLevel, models.BookmarkTarget, int, int) error); ok {
		r2 = rf(ctx, userID, level, target, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - level bookmark_service.BookmarkLevel
//   - target BookmarkTarget
//   - limit int
//   - offset int
func (_e *MockService_Expecter) List(ctx interface{}, userID interface{}, level interface{}, target interface{}, limit interface{}, offset interface{}) *MockService_List_Call {
	return &MockService_List_Call{Call: _e.mock.On("List", ctx, userID, level, target, limit, offset)}
}

func (_c *MockService_List_Call) Run(run func(ctx context.Context, userID uuid.UUID, level models.BookmarkLevel, target models.BookmarkTarget, limit int, offset int)) *MockService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.BookmarkLevel), args[3].(models.BookmarkTarget), args[4].(int), args[5].(int))
	})
	return _c
}

func (_c *MockService_List_Call) Return(_a0 []*models.Bookmark, _a1 int64, _a2 error) *MockService_List_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockService_List_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.BookmarkLevel, models.BookmarkTarget, int, int) ([]*models.Bookmark, int64, error)) *MockService_List_Call {
	_c.Call.Return(run)
	return _c
}

// StorageToModel provides a mock function with given fields: source
func (_m *MockService) StorageToModel(source *improve_post_storage.Model) *models.Bookmark {
	ret := _m.Called(source)

	var r0 *models.Bookmark
	if rf, ok := ret.Get(0).(func(*improve_post_storage.Model) *models.Bookmark); ok {
		r0 = rf(source)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Bookmark)
		}
	}

	return r0
}

// MockService_StorageToModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StorageToModel'
type MockService_StorageToModel_Call struct {
	*mock.Call
}

// StorageToModel is a helper method to define mock.On call
//   - source *improve_post_storage.Model
func (_e *MockService_Expecter) StorageToModel(source interface{}) *MockService_StorageToModel_Call {
	return &MockService_StorageToModel_Call{Call: _e.mock.On("StorageToModel", source)}
}

func (_c *MockService_StorageToModel_Call) Run(run func(source *improve_post_storage.Model)) *MockService_StorageToModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*improve_post_storage.Model))
	})
	return _c
}

func (_c *MockService_StorageToModel_Call) Return(_a0 *models.Bookmark) *MockService_StorageToModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_StorageToModel_Call) RunAndReturn(run func(*improve_post_storage.Model) *models.Bookmark) *MockService_StorageToModel_Call {
	_c.Call.Return(run)
	return _c
}

// UnBookmark provides a mock function with given fields: ctx, userID, requestID, target
func (_m *MockService) UnBookmark(ctx context.Context, userID uuid.UUID, requestID uuid.UUID, target models.BookmarkTarget) error {
	ret := _m.Called(ctx, userID, requestID, target)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, models.BookmarkTarget) error); ok {
		r0 = rf(ctx, userID, requestID, target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_UnBookmark_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnBookmark'
type MockService_UnBookmark_Call struct {
	*mock.Call
}

// UnBookmark is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - requestID uuid.UUID
//   - target BookmarkTarget
func (_e *MockService_Expecter) UnBookmark(ctx interface{}, userID interface{}, requestID interface{}, target interface{}) *MockService_UnBookmark_Call {
	return &MockService_UnBookmark_Call{Call: _e.mock.On("UnBookmark", ctx, userID, requestID, target)}
}

func (_c *MockService_UnBookmark_Call) Run(run func(ctx context.Context, userID uuid.UUID, requestID uuid.UUID, target models.BookmarkTarget)) *MockService_UnBookmark_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(models.BookmarkTarget))
	})
	return _c
}

func (_c *MockService_UnBookmark_Call) Return(_a0 error) *MockService_UnBookmark_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_UnBookmark_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, models.BookmarkTarget) error) *MockService_UnBookmark_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockService(t mockConstructorTestingTNewMockService) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
