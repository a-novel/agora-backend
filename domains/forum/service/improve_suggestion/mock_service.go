// Code generated by mockery v2.20.0. DO NOT EDIT.

package improve_suggestion_service

import (
	context "context"
	"github.com/a-novel/agora-backend/domains/forum/storage/improve_suggestion"
	"github.com/a-novel/agora-backend/models"

	mock "github.com/stretchr/testify/mock"
	time "time"

	uuid "github.com/google/uuid"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, data, userID, sourceID, id, now
func (_m *MockService) Create(ctx context.Context, data *models.ImproveSuggestionUpsert, userID uuid.UUID, sourceID uuid.UUID, id uuid.UUID, now time.Time) (*models.ImproveSuggestion, error) {
	ret := _m.Called(ctx, data, userID, sourceID, id, now)

	var r0 *models.ImproveSuggestion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.ImproveSuggestionUpsert, uuid.UUID, uuid.UUID, uuid.UUID, time.Time) (*models.ImproveSuggestion, error)); ok {
		return rf(ctx, data, userID, sourceID, id, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.ImproveSuggestionUpsert, uuid.UUID, uuid.UUID, uuid.UUID, time.Time) *models.ImproveSuggestion); ok {
		r0 = rf(ctx, data, userID, sourceID, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ImproveSuggestion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.ImproveSuggestionUpsert, uuid.UUID, uuid.UUID, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, data, userID, sourceID, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - data *ImproveSuggestionUpsert
//   - userID uuid.UUID
//   - sourceID uuid.UUID
//   - id uuid.UUID
//   - now time.Time
func (_e *MockService_Expecter) Create(ctx interface{}, data interface{}, userID interface{}, sourceID interface{}, id interface{}, now interface{}) *MockService_Create_Call {
	return &MockService_Create_Call{Call: _e.mock.On("Create", ctx, data, userID, sourceID, id, now)}
}

func (_c *MockService_Create_Call) Run(run func(ctx context.Context, data *models.ImproveSuggestionUpsert, userID uuid.UUID, sourceID uuid.UUID, id uuid.UUID, now time.Time)) *MockService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.ImproveSuggestionUpsert), args[2].(uuid.UUID), args[3].(uuid.UUID), args[4].(uuid.UUID), args[5].(time.Time))
	})
	return _c
}

func (_c *MockService_Create_Call) Return(_a0 *models.ImproveSuggestion, _a1 error) *MockService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Create_Call) RunAndReturn(run func(context.Context, *models.ImproveSuggestionUpsert, uuid.UUID, uuid.UUID, uuid.UUID, time.Time) (*models.ImproveSuggestion, error)) *MockService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockService) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockService_Expecter) Delete(ctx interface{}, id interface{}) *MockService_Delete_Call {
	return &MockService_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockService_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockService_Delete_Call) Return(_a0 error) *MockService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetPreviews provides a mock function with given fields: ctx, ids
func (_m *MockService) GetPreviews(ctx context.Context, ids []uuid.UUID) ([]*models.ImproveSuggestion, error) {
	ret := _m.Called(ctx, ids)

	var r0 []*models.ImproveSuggestion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]*models.ImproveSuggestion, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []*models.ImproveSuggestion); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ImproveSuggestion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetPreviews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPreviews'
type MockService_GetPreviews_Call struct {
	*mock.Call
}

// GetPreviews is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []uuid.UUID
func (_e *MockService_Expecter) GetPreviews(ctx interface{}, ids interface{}) *MockService_GetPreviews_Call {
	return &MockService_GetPreviews_Call{Call: _e.mock.On("GetPreviews", ctx, ids)}
}

func (_c *MockService_GetPreviews_Call) Run(run func(ctx context.Context, ids []uuid.UUID)) *MockService_GetPreviews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *MockService_GetPreviews_Call) Return(_a0 []*models.ImproveSuggestion, _a1 error) *MockService_GetPreviews_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetPreviews_Call) RunAndReturn(run func(context.Context, []uuid.UUID) ([]*models.ImproveSuggestion, error)) *MockService_GetPreviews_Call {
	_c.Call.Return(run)
	return _c
}

// IsCreator provides a mock function with given fields: ctx, userID, postID
func (_m *MockService) IsCreator(ctx context.Context, userID uuid.UUID, postID uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, userID, postID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (bool, error)); ok {
		return rf(ctx, userID, postID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(ctx, userID, postID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, userID, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_IsCreator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsCreator'
type MockService_IsCreator_Call struct {
	*mock.Call
}

// IsCreator is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - postID uuid.UUID
func (_e *MockService_Expecter) IsCreator(ctx interface{}, userID interface{}, postID interface{}) *MockService_IsCreator_Call {
	return &MockService_IsCreator_Call{Call: _e.mock.On("IsCreator", ctx, userID, postID)}
}

func (_c *MockService_IsCreator_Call) Run(run func(ctx context.Context, userID uuid.UUID, postID uuid.UUID)) *MockService_IsCreator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockService_IsCreator_Call) Return(_a0 bool, _a1 error) *MockService_IsCreator_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_IsCreator_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (bool, error)) *MockService_IsCreator_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, query, limit, offset
func (_m *MockService) List(ctx context.Context, query models.ImproveSuggestionsList, limit int, offset int) ([]*models.ImproveSuggestion, int64, error) {
	ret := _m.Called(ctx, query, limit, offset)

	var r0 []*models.ImproveSuggestion
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ImproveSuggestionsList, int, int) ([]*models.ImproveSuggestion, int64, error)); ok {
		return rf(ctx, query, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ImproveSuggestionsList, int, int) []*models.ImproveSuggestion); ok {
		r0 = rf(ctx, query, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ImproveSuggestion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ImproveSuggestionsList, int, int) int64); ok {
		r1 = rf(ctx, query, limit, offset)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, models.ImproveSuggestionsList, int, int) error); ok {
		r2 = rf(ctx, query, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - query ImproveSuggestionsList
//   - limit int
//   - offset int
func (_e *MockService_Expecter) List(ctx interface{}, query interface{}, limit interface{}, offset interface{}) *MockService_List_Call {
	return &MockService_List_Call{Call: _e.mock.On("List", ctx, query, limit, offset)}
}

func (_c *MockService_List_Call) Run(run func(ctx context.Context, query models.ImproveSuggestionsList, limit int, offset int)) *MockService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.ImproveSuggestionsList), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockService_List_Call) Return(_a0 []*models.ImproveSuggestion, _a1 int64, _a2 error) *MockService_List_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockService_List_Call) RunAndReturn(run func(context.Context, models.ImproveSuggestionsList, int, int) ([]*models.ImproveSuggestion, int64, error)) *MockService_List_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: ctx, id
func (_m *MockService) Read(ctx context.Context, id uuid.UUID) (*models.ImproveSuggestion, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.ImproveSuggestion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.ImproveSuggestion, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.ImproveSuggestion); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ImproveSuggestion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockService_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockService_Expecter) Read(ctx interface{}, id interface{}) *MockService_Read_Call {
	return &MockService_Read_Call{Call: _e.mock.On("Read", ctx, id)}
}

func (_c *MockService_Read_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockService_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockService_Read_Call) Return(_a0 *models.ImproveSuggestion, _a1 error) *MockService_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Read_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.ImproveSuggestion, error)) *MockService_Read_Call {
	_c.Call.Return(run)
	return _c
}

// StorageToModel provides a mock function with given fields: source
func (_m *MockService) StorageToModel(source *improve_suggestion_storage.Model) *models.ImproveSuggestion {
	ret := _m.Called(source)

	var r0 *models.ImproveSuggestion
	if rf, ok := ret.Get(0).(func(*improve_suggestion_storage.Model) *models.ImproveSuggestion); ok {
		r0 = rf(source)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ImproveSuggestion)
		}
	}

	return r0
}

// MockService_StorageToModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StorageToModel'
type MockService_StorageToModel_Call struct {
	*mock.Call
}

// StorageToModel is a helper method to define mock.On call
//   - source *improve_suggestion_storage.Model
func (_e *MockService_Expecter) StorageToModel(source interface{}) *MockService_StorageToModel_Call {
	return &MockService_StorageToModel_Call{Call: _e.mock.On("StorageToModel", source)}
}

func (_c *MockService_StorageToModel_Call) Run(run func(source *improve_suggestion_storage.Model)) *MockService_StorageToModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*improve_suggestion_storage.Model))
	})
	return _c
}

func (_c *MockService_StorageToModel_Call) Return(_a0 *models.ImproveSuggestion) *MockService_StorageToModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_StorageToModel_Call) RunAndReturn(run func(*improve_suggestion_storage.Model) *models.ImproveSuggestion) *MockService_StorageToModel_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, data, id, now
func (_m *MockService) Update(ctx context.Context, data *models.ImproveSuggestionUpsert, id uuid.UUID, now time.Time) (*models.ImproveSuggestion, error) {
	ret := _m.Called(ctx, data, id, now)

	var r0 *models.ImproveSuggestion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.ImproveSuggestionUpsert, uuid.UUID, time.Time) (*models.ImproveSuggestion, error)); ok {
		return rf(ctx, data, id, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.ImproveSuggestionUpsert, uuid.UUID, time.Time) *models.ImproveSuggestion); ok {
		r0 = rf(ctx, data, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ImproveSuggestion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.ImproveSuggestionUpsert, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, data, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - data *ImproveSuggestionUpsert
//   - id uuid.UUID
//   - now time.Time
func (_e *MockService_Expecter) Update(ctx interface{}, data interface{}, id interface{}, now interface{}) *MockService_Update_Call {
	return &MockService_Update_Call{Call: _e.mock.On("Update", ctx, data, id, now)}
}

func (_c *MockService_Update_Call) Run(run func(ctx context.Context, data *models.ImproveSuggestionUpsert, id uuid.UUID, now time.Time)) *MockService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.ImproveSuggestionUpsert), args[2].(uuid.UUID), args[3].(time.Time))
	})
	return _c
}

func (_c *MockService_Update_Call) Return(_a0 *models.ImproveSuggestion, _a1 error) *MockService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Update_Call) RunAndReturn(run func(context.Context, *models.ImproveSuggestionUpsert, uuid.UUID, time.Time) (*models.ImproveSuggestion, error)) *MockService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields: ctx, validated, id
func (_m *MockService) Validate(ctx context.Context, validated bool, id uuid.UUID) (*models.ImproveSuggestion, error) {
	ret := _m.Called(ctx, validated, id)

	var r0 *models.ImproveSuggestion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool, uuid.UUID) (*models.ImproveSuggestion, error)); ok {
		return rf(ctx, validated, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool, uuid.UUID) *models.ImproveSuggestion); ok {
		r0 = rf(ctx, validated, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ImproveSuggestion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool, uuid.UUID) error); ok {
		r1 = rf(ctx, validated, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockService_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - ctx context.Context
//   - validated bool
//   - id uuid.UUID
func (_e *MockService_Expecter) Validate(ctx interface{}, validated interface{}, id interface{}) *MockService_Validate_Call {
	return &MockService_Validate_Call{Call: _e.mock.On("Validate", ctx, validated, id)}
}

func (_c *MockService_Validate_Call) Run(run func(ctx context.Context, validated bool, id uuid.UUID)) *MockService_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockService_Validate_Call) Return(_a0 *models.ImproveSuggestion, _a1 error) *MockService_Validate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Validate_Call) RunAndReturn(run func(context.Context, bool, uuid.UUID) (*models.ImproveSuggestion, error)) *MockService_Validate_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockService(t mockConstructorTestingTNewMockService) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
