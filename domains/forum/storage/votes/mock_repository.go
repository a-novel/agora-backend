// Code generated by mockery v2.20.0. DO NOT EDIT.

package votes_storage

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// GetVotedPosts provides a mock function with given fields: ctx, userID, target, limit, offset
func (_m *MockRepository) GetVotedPosts(ctx context.Context, userID uuid.UUID, target Target, limit int, offset int) ([]*VotedPost, int64, error) {
	ret := _m.Called(ctx, userID, target, limit, offset)

	var r0 []*VotedPost
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, Target, int, int) ([]*VotedPost, int64, error)); ok {
		return rf(ctx, userID, target, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, Target, int, int) []*VotedPost); ok {
		r0 = rf(ctx, userID, target, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*VotedPost)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, Target, int, int) int64); ok {
		r1 = rf(ctx, userID, target, limit, offset)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, Target, int, int) error); ok {
		r2 = rf(ctx, userID, target, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockRepository_GetVotedPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVotedPosts'
type MockRepository_GetVotedPosts_Call struct {
	*mock.Call
}

// GetVotedPosts is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - target Target
//   - limit int
//   - offset int
func (_e *MockRepository_Expecter) GetVotedPosts(ctx interface{}, userID interface{}, target interface{}, limit interface{}, offset interface{}) *MockRepository_GetVotedPosts_Call {
	return &MockRepository_GetVotedPosts_Call{Call: _e.mock.On("GetVotedPosts", ctx, userID, target, limit, offset)}
}

func (_c *MockRepository_GetVotedPosts_Call) Run(run func(ctx context.Context, userID uuid.UUID, target Target, limit int, offset int)) *MockRepository_GetVotedPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(Target), args[3].(int), args[4].(int))
	})
	return _c
}

func (_c *MockRepository_GetVotedPosts_Call) Return(_a0 []*VotedPost, _a1 int64, _a2 error) *MockRepository_GetVotedPosts_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockRepository_GetVotedPosts_Call) RunAndReturn(run func(context.Context, uuid.UUID, Target, int, int) ([]*VotedPost, int64, error)) *MockRepository_GetVotedPosts_Call {
	_c.Call.Return(run)
	return _c
}

// HasVoted provides a mock function with given fields: ctx, postID, userID, target
func (_m *MockRepository) HasVoted(ctx context.Context, postID uuid.UUID, userID uuid.UUID, target Target) (Vote, error) {
	ret := _m.Called(ctx, postID, userID, target)

	var r0 Vote
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, Target) (Vote, error)); ok {
		return rf(ctx, postID, userID, target)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, Target) Vote); ok {
		r0 = rf(ctx, postID, userID, target)
	} else {
		r0 = ret.Get(0).(Vote)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, Target) error); ok {
		r1 = rf(ctx, postID, userID, target)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_HasVoted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasVoted'
type MockRepository_HasVoted_Call struct {
	*mock.Call
}

// HasVoted is a helper method to define mock.On call
//   - ctx context.Context
//   - postID uuid.UUID
//   - userID uuid.UUID
//   - target Target
func (_e *MockRepository_Expecter) HasVoted(ctx interface{}, postID interface{}, userID interface{}, target interface{}) *MockRepository_HasVoted_Call {
	return &MockRepository_HasVoted_Call{Call: _e.mock.On("HasVoted", ctx, postID, userID, target)}
}

func (_c *MockRepository_HasVoted_Call) Run(run func(ctx context.Context, postID uuid.UUID, userID uuid.UUID, target Target)) *MockRepository_HasVoted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(Target))
	})
	return _c
}

func (_c *MockRepository_HasVoted_Call) Return(_a0 Vote, _a1 error) *MockRepository_HasVoted_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_HasVoted_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, Target) (Vote, error)) *MockRepository_HasVoted_Call {
	_c.Call.Return(run)
	return _c
}

// Vote provides a mock function with given fields: ctx, postID, userID, target, vote, now
func (_m *MockRepository) Vote(ctx context.Context, postID uuid.UUID, userID uuid.UUID, target Target, vote Vote, now time.Time) (Vote, error) {
	ret := _m.Called(ctx, postID, userID, target, vote, now)

	var r0 Vote
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, Target, Vote, time.Time) (Vote, error)); ok {
		return rf(ctx, postID, userID, target, vote, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, Target, Vote, time.Time) Vote); ok {
		r0 = rf(ctx, postID, userID, target, vote, now)
	} else {
		r0 = ret.Get(0).(Vote)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, Target, Vote, time.Time) error); ok {
		r1 = rf(ctx, postID, userID, target, vote, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Vote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Vote'
type MockRepository_Vote_Call struct {
	*mock.Call
}

// Vote is a helper method to define mock.On call
//   - ctx context.Context
//   - postID uuid.UUID
//   - userID uuid.UUID
//   - target Target
//   - vote Vote
//   - now time.Time
func (_e *MockRepository_Expecter) Vote(ctx interface{}, postID interface{}, userID interface{}, target interface{}, vote interface{}, now interface{}) *MockRepository_Vote_Call {
	return &MockRepository_Vote_Call{Call: _e.mock.On("Vote", ctx, postID, userID, target, vote, now)}
}

func (_c *MockRepository_Vote_Call) Run(run func(ctx context.Context, postID uuid.UUID, userID uuid.UUID, target Target, vote Vote, now time.Time)) *MockRepository_Vote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(Target), args[4].(Vote), args[5].(time.Time))
	})
	return _c
}

func (_c *MockRepository_Vote_Call) Return(_a0 Vote, _a1 error) *MockRepository_Vote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_Vote_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, Target, Vote, time.Time) (Vote, error)) *MockRepository_Vote_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
