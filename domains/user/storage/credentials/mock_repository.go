// Code generated by mockery v2.16.0. DO NOT EDIT.

package credentials_storage

import (
	context "context"
	"github.com/a-novel/agora-backend/models"
	time "time"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// CancelNewEmail provides a mock function with given fields: ctx, id, now
func (_m *MockRepository) CancelNewEmail(ctx context.Context, id uuid.UUID, now time.Time) (*Model, error) {
	ret := _m.Called(ctx, id, now)

	var r0 *Model
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) *Model); ok {
		r0 = rf(ctx, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Model)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_CancelNewEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelNewEmail'
type MockRepository_CancelNewEmail_Call struct {
	*mock.Call
}

// CancelNewEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - now time.Time
func (_e *MockRepository_Expecter) CancelNewEmail(ctx interface{}, id interface{}, now interface{}) *MockRepository_CancelNewEmail_Call {
	return &MockRepository_CancelNewEmail_Call{Call: _e.mock.On("CancelNewEmail", ctx, id, now)}
}

func (_c *MockRepository_CancelNewEmail_Call) Run(run func(ctx context.Context, id uuid.UUID, now time.Time)) *MockRepository_CancelNewEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(time.Time))
	})
	return _c
}

func (_c *MockRepository_CancelNewEmail_Call) Return(_a0 *Model, _a1 error) *MockRepository_CancelNewEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// EmailExists provides a mock function with given fields: ctx, email
func (_m *MockRepository) EmailExists(ctx context.Context, email models.Email) (bool, error) {
	ret := _m.Called(ctx, email)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, models.Email) bool); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Email) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_EmailExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EmailExists'
type MockRepository_EmailExists_Call struct {
	*mock.Call
}

// EmailExists is a helper method to define mock.On call
//   - ctx context.Context
//   - email Email
func (_e *MockRepository_Expecter) EmailExists(ctx interface{}, email interface{}) *MockRepository_EmailExists_Call {
	return &MockRepository_EmailExists_Call{Call: _e.mock.On("EmailExists", ctx, email)}
}

func (_c *MockRepository_EmailExists_Call) Run(run func(ctx context.Context, email models.Email)) *MockRepository_EmailExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Email))
	})
	return _c
}

func (_c *MockRepository_EmailExists_Call) Return(_a0 bool, _a1 error) *MockRepository_EmailExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Read provides a mock function with given fields: ctx, id
func (_m *MockRepository) Read(ctx context.Context, id uuid.UUID) (*Model, error) {
	ret := _m.Called(ctx, id)

	var r0 *Model
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Model); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Model)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) Read(ctx interface{}, id interface{}) *MockRepository_Read_Call {
	return &MockRepository_Read_Call{Call: _e.mock.On("Read", ctx, id)}
}

func (_c *MockRepository_Read_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockRepository_Read_Call) Return(_a0 *Model, _a1 error) *MockRepository_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ReadEmail provides a mock function with given fields: ctx, email
func (_m *MockRepository) ReadEmail(ctx context.Context, email models.Email) (*Model, error) {
	ret := _m.Called(ctx, email)

	var r0 *Model
	if rf, ok := ret.Get(0).(func(context.Context, models.Email) *Model); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Model)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Email) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_ReadEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadEmail'
type MockRepository_ReadEmail_Call struct {
	*mock.Call
}

// ReadEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email Email
func (_e *MockRepository_Expecter) ReadEmail(ctx interface{}, email interface{}) *MockRepository_ReadEmail_Call {
	return &MockRepository_ReadEmail_Call{Call: _e.mock.On("ReadEmail", ctx, email)}
}

func (_c *MockRepository_ReadEmail_Call) Run(run func(ctx context.Context, email models.Email)) *MockRepository_ReadEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Email))
	})
	return _c
}

func (_c *MockRepository_ReadEmail_Call) Return(_a0 *Model, _a1 error) *MockRepository_ReadEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ResetPassword provides a mock function with given fields: ctx, code, email, now
func (_m *MockRepository) ResetPassword(ctx context.Context, code string, email models.Email, now time.Time) (*Model, error) {
	ret := _m.Called(ctx, code, email, now)

	var r0 *Model
	if rf, ok := ret.Get(0).(func(context.Context, string, models.Email, time.Time) *Model); ok {
		r0 = rf(ctx, code, email, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Model)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, models.Email, time.Time) error); ok {
		r1 = rf(ctx, code, email, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_ResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPassword'
type MockRepository_ResetPassword_Call struct {
	*mock.Call
}

// ResetPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - email Email
//   - now time.Time
func (_e *MockRepository_Expecter) ResetPassword(ctx interface{}, code interface{}, email interface{}, now interface{}) *MockRepository_ResetPassword_Call {
	return &MockRepository_ResetPassword_Call{Call: _e.mock.On("ResetPassword", ctx, code, email, now)}
}

func (_c *MockRepository_ResetPassword_Call) Run(run func(ctx context.Context, code string, email models.Email, now time.Time)) *MockRepository_ResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(models.Email), args[3].(time.Time))
	})
	return _c
}

func (_c *MockRepository_ResetPassword_Call) Return(_a0 *Model, _a1 error) *MockRepository_ResetPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateEmail provides a mock function with given fields: ctx, email, code, id, now
func (_m *MockRepository) UpdateEmail(ctx context.Context, email models.Email, code string, id uuid.UUID, now time.Time) (*Model, error) {
	ret := _m.Called(ctx, email, code, id, now)

	var r0 *Model
	if rf, ok := ret.Get(0).(func(context.Context, models.Email, string, uuid.UUID, time.Time) *Model); ok {
		r0 = rf(ctx, email, code, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Model)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Email, string, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, email, code, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_UpdateEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEmail'
type MockRepository_UpdateEmail_Call struct {
	*mock.Call
}

// UpdateEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email Email
//   - code string
//   - id uuid.UUID
//   - now time.Time
func (_e *MockRepository_Expecter) UpdateEmail(ctx interface{}, email interface{}, code interface{}, id interface{}, now interface{}) *MockRepository_UpdateEmail_Call {
	return &MockRepository_UpdateEmail_Call{Call: _e.mock.On("UpdateEmail", ctx, email, code, id, now)}
}

func (_c *MockRepository_UpdateEmail_Call) Run(run func(ctx context.Context, email models.Email, code string, id uuid.UUID, now time.Time)) *MockRepository_UpdateEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Email), args[2].(string), args[3].(uuid.UUID), args[4].(time.Time))
	})
	return _c
}

func (_c *MockRepository_UpdateEmail_Call) Return(_a0 *Model, _a1 error) *MockRepository_UpdateEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateEmailValidation provides a mock function with given fields: ctx, code, id, now
func (_m *MockRepository) UpdateEmailValidation(ctx context.Context, code string, id uuid.UUID, now time.Time) (*Model, error) {
	ret := _m.Called(ctx, code, id, now)

	var r0 *Model
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, time.Time) *Model); ok {
		r0 = rf(ctx, code, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Model)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, code, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_UpdateEmailValidation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEmailValidation'
type MockRepository_UpdateEmailValidation_Call struct {
	*mock.Call
}

// UpdateEmailValidation is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - id uuid.UUID
//   - now time.Time
func (_e *MockRepository_Expecter) UpdateEmailValidation(ctx interface{}, code interface{}, id interface{}, now interface{}) *MockRepository_UpdateEmailValidation_Call {
	return &MockRepository_UpdateEmailValidation_Call{Call: _e.mock.On("UpdateEmailValidation", ctx, code, id, now)}
}

func (_c *MockRepository_UpdateEmailValidation_Call) Run(run func(ctx context.Context, code string, id uuid.UUID, now time.Time)) *MockRepository_UpdateEmailValidation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uuid.UUID), args[3].(time.Time))
	})
	return _c
}

func (_c *MockRepository_UpdateEmailValidation_Call) Return(_a0 *Model, _a1 error) *MockRepository_UpdateEmailValidation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateNewEmailValidation provides a mock function with given fields: ctx, code, id, now
func (_m *MockRepository) UpdateNewEmailValidation(ctx context.Context, code string, id uuid.UUID, now time.Time) (*Model, error) {
	ret := _m.Called(ctx, code, id, now)

	var r0 *Model
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, time.Time) *Model); ok {
		r0 = rf(ctx, code, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Model)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, code, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_UpdateNewEmailValidation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNewEmailValidation'
type MockRepository_UpdateNewEmailValidation_Call struct {
	*mock.Call
}

// UpdateNewEmailValidation is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - id uuid.UUID
//   - now time.Time
func (_e *MockRepository_Expecter) UpdateNewEmailValidation(ctx interface{}, code interface{}, id interface{}, now interface{}) *MockRepository_UpdateNewEmailValidation_Call {
	return &MockRepository_UpdateNewEmailValidation_Call{Call: _e.mock.On("UpdateNewEmailValidation", ctx, code, id, now)}
}

func (_c *MockRepository_UpdateNewEmailValidation_Call) Run(run func(ctx context.Context, code string, id uuid.UUID, now time.Time)) *MockRepository_UpdateNewEmailValidation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uuid.UUID), args[3].(time.Time))
	})
	return _c
}

func (_c *MockRepository_UpdateNewEmailValidation_Call) Return(_a0 *Model, _a1 error) *MockRepository_UpdateNewEmailValidation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdatePassword provides a mock function with given fields: ctx, newPassword, id, now
func (_m *MockRepository) UpdatePassword(ctx context.Context, newPassword string, id uuid.UUID, now time.Time) (*Model, error) {
	ret := _m.Called(ctx, newPassword, id, now)

	var r0 *Model
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, time.Time) *Model); ok {
		r0 = rf(ctx, newPassword, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Model)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, newPassword, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type MockRepository_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - newPassword string
//   - id uuid.UUID
//   - now time.Time
func (_e *MockRepository_Expecter) UpdatePassword(ctx interface{}, newPassword interface{}, id interface{}, now interface{}) *MockRepository_UpdatePassword_Call {
	return &MockRepository_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", ctx, newPassword, id, now)}
}

func (_c *MockRepository_UpdatePassword_Call) Run(run func(ctx context.Context, newPassword string, id uuid.UUID, now time.Time)) *MockRepository_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uuid.UUID), args[3].(time.Time))
	})
	return _c
}

func (_c *MockRepository_UpdatePassword_Call) Return(_a0 *Model, _a1 error) *MockRepository_UpdatePassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ValidateEmail provides a mock function with given fields: ctx, id, now
func (_m *MockRepository) ValidateEmail(ctx context.Context, id uuid.UUID, now time.Time) (*Model, error) {
	ret := _m.Called(ctx, id, now)

	var r0 *Model
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) *Model); ok {
		r0 = rf(ctx, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Model)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_ValidateEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateEmail'
type MockRepository_ValidateEmail_Call struct {
	*mock.Call
}

// ValidateEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - now time.Time
func (_e *MockRepository_Expecter) ValidateEmail(ctx interface{}, id interface{}, now interface{}) *MockRepository_ValidateEmail_Call {
	return &MockRepository_ValidateEmail_Call{Call: _e.mock.On("ValidateEmail", ctx, id, now)}
}

func (_c *MockRepository_ValidateEmail_Call) Run(run func(ctx context.Context, id uuid.UUID, now time.Time)) *MockRepository_ValidateEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(time.Time))
	})
	return _c
}

func (_c *MockRepository_ValidateEmail_Call) Return(_a0 *Model, _a1 error) *MockRepository_ValidateEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ValidateNewEmail provides a mock function with given fields: ctx, id, now
func (_m *MockRepository) ValidateNewEmail(ctx context.Context, id uuid.UUID, now time.Time) (*Model, error) {
	ret := _m.Called(ctx, id, now)

	var r0 *Model
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) *Model); ok {
		r0 = rf(ctx, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Model)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_ValidateNewEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateNewEmail'
type MockRepository_ValidateNewEmail_Call struct {
	*mock.Call
}

// ValidateNewEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - now time.Time
func (_e *MockRepository_Expecter) ValidateNewEmail(ctx interface{}, id interface{}, now interface{}) *MockRepository_ValidateNewEmail_Call {
	return &MockRepository_ValidateNewEmail_Call{Call: _e.mock.On("ValidateNewEmail", ctx, id, now)}
}

func (_c *MockRepository_ValidateNewEmail_Call) Run(run func(ctx context.Context, id uuid.UUID, now time.Time)) *MockRepository_ValidateNewEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(time.Time))
	})
	return _c
}

func (_c *MockRepository_ValidateNewEmail_Call) Return(_a0 *Model, _a1 error) *MockRepository_ValidateNewEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
