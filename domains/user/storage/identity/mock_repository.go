// Code generated by mockery v2.16.0. DO NOT EDIT.

package identity_storage

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Read provides a mock function with given fields: ctx, id
func (_m *MockRepository) Read(ctx context.Context, id uuid.UUID) (*Model, error) {
	ret := _m.Called(ctx, id)

	var r0 *Model
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Model); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Model)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) Read(ctx interface{}, id interface{}) *MockRepository_Read_Call {
	return &MockRepository_Read_Call{Call: _e.mock.On("Read", ctx, id)}
}

func (_c *MockRepository_Read_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockRepository_Read_Call) Return(_a0 *Model, _a1 error) *MockRepository_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Update provides a mock function with given fields: ctx, data, id, now
func (_m *MockRepository) Update(ctx context.Context, data *Core, id uuid.UUID, now time.Time) (*Model, error) {
	ret := _m.Called(ctx, data, id, now)

	var r0 *Model
	if rf, ok := ret.Get(0).(func(context.Context, *Core, uuid.UUID, time.Time) *Model); ok {
		r0 = rf(ctx, data, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Model)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *Core, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, data, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - data *Core
//   - id uuid.UUID
//   - now time.Time
func (_e *MockRepository_Expecter) Update(ctx interface{}, data interface{}, id interface{}, now interface{}) *MockRepository_Update_Call {
	return &MockRepository_Update_Call{Call: _e.mock.On("Update", ctx, data, id, now)}
}

func (_c *MockRepository_Update_Call) Run(run func(ctx context.Context, data *Core, id uuid.UUID, now time.Time)) *MockRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Core), args[2].(uuid.UUID), args[3].(time.Time))
	})
	return _c
}

func (_c *MockRepository_Update_Call) Return(_a0 *Model, _a1 error) *MockRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
