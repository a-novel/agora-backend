// Code generated by mockery v2.20.0. DO NOT EDIT.

package user_storage

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, data, id, now
func (_m *MockRepository) Create(ctx context.Context, data *Core, id uuid.UUID, now time.Time) (*Model, error) {
	ret := _m.Called(ctx, data, id, now)

	var r0 *Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *Core, uuid.UUID, time.Time) (*Model, error)); ok {
		return rf(ctx, data, id, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *Core, uuid.UUID, time.Time) *Model); ok {
		r0 = rf(ctx, data, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *Core, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, data, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - data *Core
//   - id uuid.UUID
//   - now time.Time
func (_e *MockRepository_Expecter) Create(ctx interface{}, data interface{}, id interface{}, now interface{}) *MockRepository_Create_Call {
	return &MockRepository_Create_Call{Call: _e.mock.On("Create", ctx, data, id, now)}
}

func (_c *MockRepository_Create_Call) Run(run func(ctx context.Context, data *Core, id uuid.UUID, now time.Time)) *MockRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Core), args[2].(uuid.UUID), args[3].(time.Time))
	})
	return _c
}

func (_c *MockRepository_Create_Call) Return(_a0 *Model, _a1 error) *MockRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_Create_Call) RunAndReturn(run func(context.Context, *Core, uuid.UUID, time.Time) (*Model, error)) *MockRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id, now
func (_m *MockRepository) Delete(ctx context.Context, id uuid.UUID, now time.Time) (*Model, error) {
	ret := _m.Called(ctx, id, now)

	var r0 *Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) (*Model, error)); ok {
		return rf(ctx, id, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) *Model); ok {
		r0 = rf(ctx, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - now time.Time
func (_e *MockRepository_Expecter) Delete(ctx interface{}, id interface{}, now interface{}) *MockRepository_Delete_Call {
	return &MockRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id, now)}
}

func (_c *MockRepository_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID, now time.Time)) *MockRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(time.Time))
	})
	return _c
}

func (_c *MockRepository_Delete_Call) Return(_a0 *Model, _a1 error) *MockRepository_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID, time.Time) (*Model, error)) *MockRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetPreview provides a mock function with given fields: ctx, id
func (_m *MockRepository) GetPreview(ctx context.Context, id uuid.UUID) (*Preview, error) {
	ret := _m.Called(ctx, id)

	var r0 *Preview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Preview, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Preview); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Preview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetPreview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPreview'
type MockRepository_GetPreview_Call struct {
	*mock.Call
}

// GetPreview is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) GetPreview(ctx interface{}, id interface{}) *MockRepository_GetPreview_Call {
	return &MockRepository_GetPreview_Call{Call: _e.mock.On("GetPreview", ctx, id)}
}

func (_c *MockRepository_GetPreview_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_GetPreview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockRepository_GetPreview_Call) Return(_a0 *Preview, _a1 error) *MockRepository_GetPreview_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetPreview_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*Preview, error)) *MockRepository_GetPreview_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublic provides a mock function with given fields: ctx, slug
func (_m *MockRepository) GetPublic(ctx context.Context, slug string) (*Public, error) {
	ret := _m.Called(ctx, slug)

	var r0 *Public
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Public, error)); ok {
		return rf(ctx, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Public); ok {
		r0 = rf(ctx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Public)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetPublic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublic'
type MockRepository_GetPublic_Call struct {
	*mock.Call
}

// GetPublic is a helper method to define mock.On call
//   - ctx context.Context
//   - slug string
func (_e *MockRepository_Expecter) GetPublic(ctx interface{}, slug interface{}) *MockRepository_GetPublic_Call {
	return &MockRepository_GetPublic_Call{Call: _e.mock.On("GetPublic", ctx, slug)}
}

func (_c *MockRepository_GetPublic_Call) Run(run func(ctx context.Context, slug string)) *MockRepository_GetPublic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_GetPublic_Call) Return(_a0 *Public, _a1 error) *MockRepository_GetPublic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetPublic_Call) RunAndReturn(run func(context.Context, string) (*Public, error)) *MockRepository_GetPublic_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublicPreviews provides a mock function with given fields: ctx, ids
func (_m *MockRepository) GetPublicPreviews(ctx context.Context, ids []uuid.UUID) ([]*PublicPreview, error) {
	ret := _m.Called(ctx, ids)

	var r0 []*PublicPreview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]*PublicPreview, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []*PublicPreview); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*PublicPreview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetPublicPreviews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicPreviews'
type MockRepository_GetPublicPreviews_Call struct {
	*mock.Call
}

// GetPublicPreviews is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []uuid.UUID
func (_e *MockRepository_Expecter) GetPublicPreviews(ctx interface{}, ids interface{}) *MockRepository_GetPublicPreviews_Call {
	return &MockRepository_GetPublicPreviews_Call{Call: _e.mock.On("GetPublicPreviews", ctx, ids)}
}

func (_c *MockRepository_GetPublicPreviews_Call) Run(run func(ctx context.Context, ids []uuid.UUID)) *MockRepository_GetPublicPreviews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *MockRepository_GetPublicPreviews_Call) Return(_a0 []*PublicPreview, _a1 error) *MockRepository_GetPublicPreviews_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetPublicPreviews_Call) RunAndReturn(run func(context.Context, []uuid.UUID) ([]*PublicPreview, error)) *MockRepository_GetPublicPreviews_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: ctx, query, limit, offset
func (_m *MockRepository) Search(ctx context.Context, query string, limit int, offset int) ([]*PublicPreview, int64, error) {
	ret := _m.Called(ctx, query, limit, offset)

	var r0 []*PublicPreview
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*PublicPreview, int64, error)); ok {
		return rf(ctx, query, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*PublicPreview); ok {
		r0 = rf(ctx, query, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*PublicPreview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int64); ok {
		r1 = rf(ctx, query, limit, offset)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, query, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockRepository_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockRepository_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - limit int
//   - offset int
func (_e *MockRepository_Expecter) Search(ctx interface{}, query interface{}, limit interface{}, offset interface{}) *MockRepository_Search_Call {
	return &MockRepository_Search_Call{Call: _e.mock.On("Search", ctx, query, limit, offset)}
}

func (_c *MockRepository_Search_Call) Run(run func(ctx context.Context, query string, limit int, offset int)) *MockRepository_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockRepository_Search_Call) Return(_a0 []*PublicPreview, _a1 int64, _a2 error) *MockRepository_Search_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockRepository_Search_Call) RunAndReturn(run func(context.Context, string, int, int) ([]*PublicPreview, int64, error)) *MockRepository_Search_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
