// Code generated by mockery v2.20.0. DO NOT EDIT.

package user_service

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/a-novel/agora-backend/models"

	time "time"

	user_storage "github.com/a-novel/agora-backend/domains/user/storage/user"

	uuid "github.com/google/uuid"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, data, id, now
func (_m *MockService) Create(ctx context.Context, data *models.UserCreateForm, id uuid.UUID, now time.Time) (*models.User, *models.UserPostRegistration, error) {
	ret := _m.Called(ctx, data, id, now)

	var r0 *models.User
	var r1 *models.UserPostRegistration
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserCreateForm, uuid.UUID, time.Time) (*models.User, *models.UserPostRegistration, error)); ok {
		return rf(ctx, data, id, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserCreateForm, uuid.UUID, time.Time) *models.User); ok {
		r0 = rf(ctx, data, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.UserCreateForm, uuid.UUID, time.Time) *models.UserPostRegistration); ok {
		r1 = rf(ctx, data, id, now)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.UserPostRegistration)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *models.UserCreateForm, uuid.UUID, time.Time) error); ok {
		r2 = rf(ctx, data, id, now)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - data *models.UserCreateForm
//   - id uuid.UUID
//   - now time.Time
func (_e *MockService_Expecter) Create(ctx interface{}, data interface{}, id interface{}, now interface{}) *MockService_Create_Call {
	return &MockService_Create_Call{Call: _e.mock.On("Create", ctx, data, id, now)}
}

func (_c *MockService_Create_Call) Run(run func(ctx context.Context, data *models.UserCreateForm, id uuid.UUID, now time.Time)) *MockService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.UserCreateForm), args[2].(uuid.UUID), args[3].(time.Time))
	})
	return _c
}

func (_c *MockService_Create_Call) Return(_a0 *models.User, _a1 *models.UserPostRegistration, _a2 error) *MockService_Create_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockService_Create_Call) RunAndReturn(run func(context.Context, *models.UserCreateForm, uuid.UUID, time.Time) (*models.User, *models.UserPostRegistration, error)) *MockService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id, now
func (_m *MockService) Delete(ctx context.Context, id uuid.UUID, now time.Time) (*models.User, error) {
	ret := _m.Called(ctx, id, now)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) (*models.User, error)); ok {
		return rf(ctx, id, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) *models.User); ok {
		r0 = rf(ctx, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - now time.Time
func (_e *MockService_Expecter) Delete(ctx interface{}, id interface{}, now interface{}) *MockService_Delete_Call {
	return &MockService_Delete_Call{Call: _e.mock.On("Delete", ctx, id, now)}
}

func (_c *MockService_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID, now time.Time)) *MockService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(time.Time))
	})
	return _c
}

func (_c *MockService_Delete_Call) Return(_a0 *models.User, _a1 error) *MockService_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID, time.Time) (*models.User, error)) *MockService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthorizations provides a mock function with given fields: ctx, id
func (_m *MockService) GetAuthorizations(ctx context.Context, id uuid.UUID) ([]string, error) {
	ret := _m.Called(ctx, id)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []string); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetAuthorizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthorizations'
type MockService_GetAuthorizations_Call struct {
	*mock.Call
}

// GetAuthorizations is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockService_Expecter) GetAuthorizations(ctx interface{}, id interface{}) *MockService_GetAuthorizations_Call {
	return &MockService_GetAuthorizations_Call{Call: _e.mock.On("GetAuthorizations", ctx, id)}
}

func (_c *MockService_GetAuthorizations_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockService_GetAuthorizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockService_GetAuthorizations_Call) Return(_a0 []string, _a1 error) *MockService_GetAuthorizations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetAuthorizations_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]string, error)) *MockService_GetAuthorizations_Call {
	_c.Call.Return(run)
	return _c
}

// GetPreview provides a mock function with given fields: ctx, id
func (_m *MockService) GetPreview(ctx context.Context, id uuid.UUID) (*models.UserPreview, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.UserPreview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.UserPreview, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.UserPreview); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserPreview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetPreview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPreview'
type MockService_GetPreview_Call struct {
	*mock.Call
}

// GetPreview is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockService_Expecter) GetPreview(ctx interface{}, id interface{}) *MockService_GetPreview_Call {
	return &MockService_GetPreview_Call{Call: _e.mock.On("GetPreview", ctx, id)}
}

func (_c *MockService_GetPreview_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockService_GetPreview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockService_GetPreview_Call) Return(_a0 *models.UserPreview, _a1 error) *MockService_GetPreview_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetPreview_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.UserPreview, error)) *MockService_GetPreview_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublic provides a mock function with given fields: ctx, slug
func (_m *MockService) GetPublic(ctx context.Context, slug string) (*models.UserPublic, error) {
	ret := _m.Called(ctx, slug)

	var r0 *models.UserPublic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.UserPublic, error)); ok {
		return rf(ctx, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.UserPublic); ok {
		r0 = rf(ctx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserPublic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetPublic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublic'
type MockService_GetPublic_Call struct {
	*mock.Call
}

// GetPublic is a helper method to define mock.On call
//   - ctx context.Context
//   - slug string
func (_e *MockService_Expecter) GetPublic(ctx interface{}, slug interface{}) *MockService_GetPublic_Call {
	return &MockService_GetPublic_Call{Call: _e.mock.On("GetPublic", ctx, slug)}
}

func (_c *MockService_GetPublic_Call) Run(run func(ctx context.Context, slug string)) *MockService_GetPublic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_GetPublic_Call) Return(_a0 *models.UserPublic, _a1 error) *MockService_GetPublic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetPublic_Call) RunAndReturn(run func(context.Context, string) (*models.UserPublic, error)) *MockService_GetPublic_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublicPreviews provides a mock function with given fields: ctx, ids
func (_m *MockService) GetPublicPreviews(ctx context.Context, ids []uuid.UUID) ([]*models.UserPublicPreview, error) {
	ret := _m.Called(ctx, ids)

	var r0 []*models.UserPublicPreview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]*models.UserPublicPreview, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []*models.UserPublicPreview); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.UserPublicPreview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetPublicPreviews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicPreviews'
type MockService_GetPublicPreviews_Call struct {
	*mock.Call
}

// GetPublicPreviews is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []uuid.UUID
func (_e *MockService_Expecter) GetPublicPreviews(ctx interface{}, ids interface{}) *MockService_GetPublicPreviews_Call {
	return &MockService_GetPublicPreviews_Call{Call: _e.mock.On("GetPublicPreviews", ctx, ids)}
}

func (_c *MockService_GetPublicPreviews_Call) Run(run func(ctx context.Context, ids []uuid.UUID)) *MockService_GetPublicPreviews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *MockService_GetPublicPreviews_Call) Return(_a0 []*models.UserPublicPreview, _a1 error) *MockService_GetPublicPreviews_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetPublicPreviews_Call) RunAndReturn(run func(context.Context, []uuid.UUID) ([]*models.UserPublicPreview, error)) *MockService_GetPublicPreviews_Call {
	_c.Call.Return(run)
	return _c
}

// HasAuthorizations provides a mock function with given fields: ctx, id, authorizations
func (_m *MockService) HasAuthorizations(ctx context.Context, id uuid.UUID, authorizations models.UserAuthorizations) (bool, error) {
	ret := _m.Called(ctx, id, authorizations)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.UserAuthorizations) (bool, error)); ok {
		return rf(ctx, id, authorizations)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.UserAuthorizations) bool); ok {
		r0 = rf(ctx, id, authorizations)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.UserAuthorizations) error); ok {
		r1 = rf(ctx, id, authorizations)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_HasAuthorizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasAuthorizations'
type MockService_HasAuthorizations_Call struct {
	*mock.Call
}

// HasAuthorizations is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - authorizations models.UserAuthorizations
func (_e *MockService_Expecter) HasAuthorizations(ctx interface{}, id interface{}, authorizations interface{}) *MockService_HasAuthorizations_Call {
	return &MockService_HasAuthorizations_Call{Call: _e.mock.On("HasAuthorizations", ctx, id, authorizations)}
}

func (_c *MockService_HasAuthorizations_Call) Run(run func(ctx context.Context, id uuid.UUID, authorizations models.UserAuthorizations)) *MockService_HasAuthorizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.UserAuthorizations))
	})
	return _c
}

func (_c *MockService_HasAuthorizations_Call) Return(_a0 bool, _a1 error) *MockService_HasAuthorizations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_HasAuthorizations_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.UserAuthorizations) (bool, error)) *MockService_HasAuthorizations_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: ctx, query, limit, offset
func (_m *MockService) Search(ctx context.Context, query string, limit int, offset int) ([]*models.UserPublicPreview, int64, error) {
	ret := _m.Called(ctx, query, limit, offset)

	var r0 []*models.UserPublicPreview
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*models.UserPublicPreview, int64, error)); ok {
		return rf(ctx, query, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*models.UserPublicPreview); ok {
		r0 = rf(ctx, query, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.UserPublicPreview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int64); ok {
		r1 = rf(ctx, query, limit, offset)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, query, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockService_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockService_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - limit int
//   - offset int
func (_e *MockService_Expecter) Search(ctx interface{}, query interface{}, limit interface{}, offset interface{}) *MockService_Search_Call {
	return &MockService_Search_Call{Call: _e.mock.On("Search", ctx, query, limit, offset)}
}

func (_c *MockService_Search_Call) Run(run func(ctx context.Context, query string, limit int, offset int)) *MockService_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockService_Search_Call) Return(_a0 []*models.UserPublicPreview, _a1 int64, _a2 error) *MockService_Search_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockService_Search_Call) RunAndReturn(run func(context.Context, string, int, int) ([]*models.UserPublicPreview, int64, error)) *MockService_Search_Call {
	_c.Call.Return(run)
	return _c
}

// StorageToModel provides a mock function with given fields: source
func (_m *MockService) StorageToModel(source *user_storage.Model) *models.User {
	ret := _m.Called(source)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(*user_storage.Model) *models.User); ok {
		r0 = rf(source)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	return r0
}

// MockService_StorageToModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StorageToModel'
type MockService_StorageToModel_Call struct {
	*mock.Call
}

// StorageToModel is a helper method to define mock.On call
//   - source *user_storage.Model
func (_e *MockService_Expecter) StorageToModel(source interface{}) *MockService_StorageToModel_Call {
	return &MockService_StorageToModel_Call{Call: _e.mock.On("StorageToModel", source)}
}

func (_c *MockService_StorageToModel_Call) Run(run func(source *user_storage.Model)) *MockService_StorageToModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*user_storage.Model))
	})
	return _c
}

func (_c *MockService_StorageToModel_Call) Return(_a0 *models.User) *MockService_StorageToModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_StorageToModel_Call) RunAndReturn(run func(*user_storage.Model) *models.User) *MockService_StorageToModel_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockService(t mockConstructorTestingTNewMockService) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
