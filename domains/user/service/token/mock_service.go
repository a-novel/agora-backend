// Code generated by mockery v2.20.0. DO NOT EDIT.

package token_service

import (
	ed25519 "crypto/ed25519"
	"github.com/a-novel/agora-backend/models"
	time "time"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Decode provides a mock function with given fields: source, signatureKeys, now
func (_m *MockService) Decode(source string, signatureKeys []ed25519.PublicKey, now time.Time) (*models.UserToken, error) {
	ret := _m.Called(source, signatureKeys, now)

	var r0 *models.UserToken
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []ed25519.PublicKey, time.Time) (*models.UserToken, error)); ok {
		return rf(source, signatureKeys, now)
	}
	if rf, ok := ret.Get(0).(func(string, []ed25519.PublicKey, time.Time) *models.UserToken); ok {
		r0 = rf(source, signatureKeys, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserToken)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []ed25519.PublicKey, time.Time) error); ok {
		r1 = rf(source, signatureKeys, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type MockService_Decode_Call struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - source string
//   - signatureKeys []ed25519.PublicKey
//   - now time.Time
func (_e *MockService_Expecter) Decode(source interface{}, signatureKeys interface{}, now interface{}) *MockService_Decode_Call {
	return &MockService_Decode_Call{Call: _e.mock.On("Decode", source, signatureKeys, now)}
}

func (_c *MockService_Decode_Call) Run(run func(source string, signatureKeys []ed25519.PublicKey, now time.Time)) *MockService_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]ed25519.PublicKey), args[2].(time.Time))
	})
	return _c
}

func (_c *MockService_Decode_Call) Return(_a0 *models.UserToken, _a1 error) *MockService_Decode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Decode_Call) RunAndReturn(run func(string, []ed25519.PublicKey, time.Time) (*models.UserToken, error)) *MockService_Decode_Call {
	_c.Call.Return(run)
	return _c
}

// Encode provides a mock function with given fields: data, ttl, signatureKey, id, now
func (_m *MockService) Encode(data models.UserTokenPayload, ttl time.Duration, signatureKey ed25519.PrivateKey, id uuid.UUID, now time.Time) (string, error) {
	ret := _m.Called(data, ttl, signatureKey, id, now)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(models.UserTokenPayload, time.Duration, ed25519.PrivateKey, uuid.UUID, time.Time) (string, error)); ok {
		return rf(data, ttl, signatureKey, id, now)
	}
	if rf, ok := ret.Get(0).(func(models.UserTokenPayload, time.Duration, ed25519.PrivateKey, uuid.UUID, time.Time) string); ok {
		r0 = rf(data, ttl, signatureKey, id, now)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(models.UserTokenPayload, time.Duration, ed25519.PrivateKey, uuid.UUID, time.Time) error); ok {
		r1 = rf(data, ttl, signatureKey, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type MockService_Encode_Call struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
//   - data UserTokenPayload
//   - ttl time.Duration
//   - signatureKey ed25519.PrivateKey
//   - id uuid.UUID
//   - now time.Time
func (_e *MockService_Expecter) Encode(data interface{}, ttl interface{}, signatureKey interface{}, id interface{}, now interface{}) *MockService_Encode_Call {
	return &MockService_Encode_Call{Call: _e.mock.On("Encode", data, ttl, signatureKey, id, now)}
}

func (_c *MockService_Encode_Call) Run(run func(data models.UserTokenPayload, ttl time.Duration, signatureKey ed25519.PrivateKey, id uuid.UUID, now time.Time)) *MockService_Encode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.UserTokenPayload), args[1].(time.Duration), args[2].(ed25519.PrivateKey), args[3].(uuid.UUID), args[4].(time.Time))
	})
	return _c
}

func (_c *MockService_Encode_Call) Return(_a0 string, _a1 error) *MockService_Encode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Encode_Call) RunAndReturn(run func(models.UserTokenPayload, time.Duration, ed25519.PrivateKey, uuid.UUID, time.Time) (string, error)) *MockService_Encode_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockService(t mockConstructorTestingTNewMockService) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
