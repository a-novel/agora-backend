// Code generated by mockery v2.20.0. DO NOT EDIT.

package credentials_service

import (
	context "context"
	"github.com/a-novel/agora-backend/domains/user/storage/credentials"
	"github.com/a-novel/agora-backend/models"

	mock "github.com/stretchr/testify/mock"
	time "time"

	uuid "github.com/google/uuid"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: ctx, data
func (_m *MockService) Authenticate(ctx context.Context, data *models.UserCredentialsLoginForm) (*models.UserCredentials, error) {
	ret := _m.Called(ctx, data)

	var r0 *models.UserCredentials
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserCredentialsLoginForm) (*models.UserCredentials, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserCredentialsLoginForm) *models.UserCredentials); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserCredentials)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.UserCredentialsLoginForm) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockService_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - ctx context.Context
//   - data *UserCredentialsLoginForm
func (_e *MockService_Expecter) Authenticate(ctx interface{}, data interface{}) *MockService_Authenticate_Call {
	return &MockService_Authenticate_Call{Call: _e.mock.On("Authenticate", ctx, data)}
}

func (_c *MockService_Authenticate_Call) Run(run func(ctx context.Context, data *models.UserCredentialsLoginForm)) *MockService_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.UserCredentialsLoginForm))
	})
	return _c
}

func (_c *MockService_Authenticate_Call) Return(_a0 *models.UserCredentials, _a1 error) *MockService_Authenticate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Authenticate_Call) RunAndReturn(run func(context.Context, *models.UserCredentialsLoginForm) (*models.UserCredentials, error)) *MockService_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// CancelNewEmail provides a mock function with given fields: ctx, id, now
func (_m *MockService) CancelNewEmail(ctx context.Context, id uuid.UUID, now time.Time) (*models.UserCredentials, error) {
	ret := _m.Called(ctx, id, now)

	var r0 *models.UserCredentials
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) (*models.UserCredentials, error)); ok {
		return rf(ctx, id, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) *models.UserCredentials); ok {
		r0 = rf(ctx, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserCredentials)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_CancelNewEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelNewEmail'
type MockService_CancelNewEmail_Call struct {
	*mock.Call
}

// CancelNewEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - now time.Time
func (_e *MockService_Expecter) CancelNewEmail(ctx interface{}, id interface{}, now interface{}) *MockService_CancelNewEmail_Call {
	return &MockService_CancelNewEmail_Call{Call: _e.mock.On("CancelNewEmail", ctx, id, now)}
}

func (_c *MockService_CancelNewEmail_Call) Run(run func(ctx context.Context, id uuid.UUID, now time.Time)) *MockService_CancelNewEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(time.Time))
	})
	return _c
}

func (_c *MockService_CancelNewEmail_Call) Return(_a0 *models.UserCredentials, _a1 error) *MockService_CancelNewEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_CancelNewEmail_Call) RunAndReturn(run func(context.Context, uuid.UUID, time.Time) (*models.UserCredentials, error)) *MockService_CancelNewEmail_Call {
	_c.Call.Return(run)
	return _c
}

// EmailExists provides a mock function with given fields: ctx, email
func (_m *MockService) EmailExists(ctx context.Context, email string) (bool, error) {
	ret := _m.Called(ctx, email)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_EmailExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EmailExists'
type MockService_EmailExists_Call struct {
	*mock.Call
}

// EmailExists is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockService_Expecter) EmailExists(ctx interface{}, email interface{}) *MockService_EmailExists_Call {
	return &MockService_EmailExists_Call{Call: _e.mock.On("EmailExists", ctx, email)}
}

func (_c *MockService_EmailExists_Call) Run(run func(ctx context.Context, email string)) *MockService_EmailExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_EmailExists_Call) Return(_a0 bool, _a1 error) *MockService_EmailExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_EmailExists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockService_EmailExists_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareRegistration provides a mock function with given fields: ctx, data
func (_m *MockService) PrepareRegistration(ctx context.Context, data *models.UserCredentialsLoginForm) (*models.UserCredentialsRegistrationForm, error) {
	ret := _m.Called(ctx, data)

	var r0 *models.UserCredentialsRegistrationForm
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserCredentialsLoginForm) (*models.UserCredentialsRegistrationForm, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserCredentialsLoginForm) *models.UserCredentialsRegistrationForm); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserCredentialsRegistrationForm)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.UserCredentialsLoginForm) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_PrepareRegistration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareRegistration'
type MockService_PrepareRegistration_Call struct {
	*mock.Call
}

// PrepareRegistration is a helper method to define mock.On call
//   - ctx context.Context
//   - data *UserCredentialsLoginForm
func (_e *MockService_Expecter) PrepareRegistration(ctx interface{}, data interface{}) *MockService_PrepareRegistration_Call {
	return &MockService_PrepareRegistration_Call{Call: _e.mock.On("PrepareRegistration", ctx, data)}
}

func (_c *MockService_PrepareRegistration_Call) Run(run func(ctx context.Context, data *models.UserCredentialsLoginForm)) *MockService_PrepareRegistration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.UserCredentialsLoginForm))
	})
	return _c
}

func (_c *MockService_PrepareRegistration_Call) Return(_a0 *models.UserCredentialsRegistrationForm, _a1 error) *MockService_PrepareRegistration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_PrepareRegistration_Call) RunAndReturn(run func(context.Context, *models.UserCredentialsLoginForm) (*models.UserCredentialsRegistrationForm, error)) *MockService_PrepareRegistration_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: ctx, id
func (_m *MockService) Read(ctx context.Context, id uuid.UUID) (*models.UserCredentials, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.UserCredentials
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.UserCredentials, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.UserCredentials); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserCredentials)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockService_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockService_Expecter) Read(ctx interface{}, id interface{}) *MockService_Read_Call {
	return &MockService_Read_Call{Call: _e.mock.On("Read", ctx, id)}
}

func (_c *MockService_Read_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockService_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockService_Read_Call) Return(_a0 *models.UserCredentials, _a1 error) *MockService_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Read_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.UserCredentials, error)) *MockService_Read_Call {
	_c.Call.Return(run)
	return _c
}

// ReadEmail provides a mock function with given fields: ctx, email
func (_m *MockService) ReadEmail(ctx context.Context, email string) (*models.UserCredentials, error) {
	ret := _m.Called(ctx, email)

	var r0 *models.UserCredentials
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.UserCredentials, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.UserCredentials); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserCredentials)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_ReadEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadEmail'
type MockService_ReadEmail_Call struct {
	*mock.Call
}

// ReadEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockService_Expecter) ReadEmail(ctx interface{}, email interface{}) *MockService_ReadEmail_Call {
	return &MockService_ReadEmail_Call{Call: _e.mock.On("ReadEmail", ctx, email)}
}

func (_c *MockService_ReadEmail_Call) Run(run func(ctx context.Context, email string)) *MockService_ReadEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_ReadEmail_Call) Return(_a0 *models.UserCredentials, _a1 error) *MockService_ReadEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_ReadEmail_Call) RunAndReturn(run func(context.Context, string) (*models.UserCredentials, error)) *MockService_ReadEmail_Call {
	_c.Call.Return(run)
	return _c
}

// ResetPassword provides a mock function with given fields: ctx, email, now
func (_m *MockService) ResetPassword(ctx context.Context, email string, now time.Time) (*models.UserCredentials, string, error) {
	ret := _m.Called(ctx, email, now)

	var r0 *models.UserCredentials
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) (*models.UserCredentials, string, error)); ok {
		return rf(ctx, email, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) *models.UserCredentials); ok {
		r0 = rf(ctx, email, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserCredentials)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time) string); ok {
		r1 = rf(ctx, email, now)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, time.Time) error); ok {
		r2 = rf(ctx, email, now)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockService_ResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPassword'
type MockService_ResetPassword_Call struct {
	*mock.Call
}

// ResetPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - now time.Time
func (_e *MockService_Expecter) ResetPassword(ctx interface{}, email interface{}, now interface{}) *MockService_ResetPassword_Call {
	return &MockService_ResetPassword_Call{Call: _e.mock.On("ResetPassword", ctx, email, now)}
}

func (_c *MockService_ResetPassword_Call) Run(run func(ctx context.Context, email string, now time.Time)) *MockService_ResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *MockService_ResetPassword_Call) Return(_a0 *models.UserCredentials, _a1 string, _a2 error) *MockService_ResetPassword_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockService_ResetPassword_Call) RunAndReturn(run func(context.Context, string, time.Time) (*models.UserCredentials, string, error)) *MockService_ResetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// StorageToModel provides a mock function with given fields: source
func (_m *MockService) StorageToModel(source *credentials_storage.Model) *models.UserCredentials {
	ret := _m.Called(source)

	var r0 *models.UserCredentials
	if rf, ok := ret.Get(0).(func(*credentials_storage.Model) *models.UserCredentials); ok {
		r0 = rf(source)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserCredentials)
		}
	}

	return r0
}

// MockService_StorageToModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StorageToModel'
type MockService_StorageToModel_Call struct {
	*mock.Call
}

// StorageToModel is a helper method to define mock.On call
//   - source *credentials_storage.Model
func (_e *MockService_Expecter) StorageToModel(source interface{}) *MockService_StorageToModel_Call {
	return &MockService_StorageToModel_Call{Call: _e.mock.On("StorageToModel", source)}
}

func (_c *MockService_StorageToModel_Call) Run(run func(source *credentials_storage.Model)) *MockService_StorageToModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*credentials_storage.Model))
	})
	return _c
}

func (_c *MockService_StorageToModel_Call) Return(_a0 *models.UserCredentials) *MockService_StorageToModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_StorageToModel_Call) RunAndReturn(run func(*credentials_storage.Model) *models.UserCredentials) *MockService_StorageToModel_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEmail provides a mock function with given fields: ctx, email, id, now
func (_m *MockService) UpdateEmail(ctx context.Context, email string, id uuid.UUID, now time.Time) (*models.UserCredentials, string, error) {
	ret := _m.Called(ctx, email, id, now)

	var r0 *models.UserCredentials
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, time.Time) (*models.UserCredentials, string, error)); ok {
		return rf(ctx, email, id, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, time.Time) *models.UserCredentials); ok {
		r0 = rf(ctx, email, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserCredentials)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uuid.UUID, time.Time) string); ok {
		r1 = rf(ctx, email, id, now)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, uuid.UUID, time.Time) error); ok {
		r2 = rf(ctx, email, id, now)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockService_UpdateEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEmail'
type MockService_UpdateEmail_Call struct {
	*mock.Call
}

// UpdateEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - id uuid.UUID
//   - now time.Time
func (_e *MockService_Expecter) UpdateEmail(ctx interface{}, email interface{}, id interface{}, now interface{}) *MockService_UpdateEmail_Call {
	return &MockService_UpdateEmail_Call{Call: _e.mock.On("UpdateEmail", ctx, email, id, now)}
}

func (_c *MockService_UpdateEmail_Call) Run(run func(ctx context.Context, email string, id uuid.UUID, now time.Time)) *MockService_UpdateEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uuid.UUID), args[3].(time.Time))
	})
	return _c
}

func (_c *MockService_UpdateEmail_Call) Return(_a0 *models.UserCredentials, _a1 string, _a2 error) *MockService_UpdateEmail_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockService_UpdateEmail_Call) RunAndReturn(run func(context.Context, string, uuid.UUID, time.Time) (*models.UserCredentials, string, error)) *MockService_UpdateEmail_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEmailValidation provides a mock function with given fields: ctx, id, now
func (_m *MockService) UpdateEmailValidation(ctx context.Context, id uuid.UUID, now time.Time) (*models.UserCredentials, string, error) {
	ret := _m.Called(ctx, id, now)

	var r0 *models.UserCredentials
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) (*models.UserCredentials, string, error)); ok {
		return rf(ctx, id, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) *models.UserCredentials); ok {
		r0 = rf(ctx, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserCredentials)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time) string); ok {
		r1 = rf(ctx, id, now)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, time.Time) error); ok {
		r2 = rf(ctx, id, now)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockService_UpdateEmailValidation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEmailValidation'
type MockService_UpdateEmailValidation_Call struct {
	*mock.Call
}

// UpdateEmailValidation is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - now time.Time
func (_e *MockService_Expecter) UpdateEmailValidation(ctx interface{}, id interface{}, now interface{}) *MockService_UpdateEmailValidation_Call {
	return &MockService_UpdateEmailValidation_Call{Call: _e.mock.On("UpdateEmailValidation", ctx, id, now)}
}

func (_c *MockService_UpdateEmailValidation_Call) Run(run func(ctx context.Context, id uuid.UUID, now time.Time)) *MockService_UpdateEmailValidation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(time.Time))
	})
	return _c
}

func (_c *MockService_UpdateEmailValidation_Call) Return(_a0 *models.UserCredentials, _a1 string, _a2 error) *MockService_UpdateEmailValidation_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockService_UpdateEmailValidation_Call) RunAndReturn(run func(context.Context, uuid.UUID, time.Time) (*models.UserCredentials, string, error)) *MockService_UpdateEmailValidation_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNewEmailValidation provides a mock function with given fields: ctx, id, now
func (_m *MockService) UpdateNewEmailValidation(ctx context.Context, id uuid.UUID, now time.Time) (*models.UserCredentials, string, error) {
	ret := _m.Called(ctx, id, now)

	var r0 *models.UserCredentials
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) (*models.UserCredentials, string, error)); ok {
		return rf(ctx, id, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) *models.UserCredentials); ok {
		r0 = rf(ctx, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserCredentials)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time) string); ok {
		r1 = rf(ctx, id, now)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, time.Time) error); ok {
		r2 = rf(ctx, id, now)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockService_UpdateNewEmailValidation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNewEmailValidation'
type MockService_UpdateNewEmailValidation_Call struct {
	*mock.Call
}

// UpdateNewEmailValidation is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - now time.Time
func (_e *MockService_Expecter) UpdateNewEmailValidation(ctx interface{}, id interface{}, now interface{}) *MockService_UpdateNewEmailValidation_Call {
	return &MockService_UpdateNewEmailValidation_Call{Call: _e.mock.On("UpdateNewEmailValidation", ctx, id, now)}
}

func (_c *MockService_UpdateNewEmailValidation_Call) Run(run func(ctx context.Context, id uuid.UUID, now time.Time)) *MockService_UpdateNewEmailValidation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(time.Time))
	})
	return _c
}

func (_c *MockService_UpdateNewEmailValidation_Call) Return(_a0 *models.UserCredentials, _a1 string, _a2 error) *MockService_UpdateNewEmailValidation_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockService_UpdateNewEmailValidation_Call) RunAndReturn(run func(context.Context, uuid.UUID, time.Time) (*models.UserCredentials, string, error)) *MockService_UpdateNewEmailValidation_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePassword provides a mock function with given fields: ctx, oldPassword, newPassword, id, now
func (_m *MockService) UpdatePassword(ctx context.Context, oldPassword string, newPassword string, id uuid.UUID, now time.Time) (*models.UserCredentials, error) {
	ret := _m.Called(ctx, oldPassword, newPassword, id, now)

	var r0 *models.UserCredentials
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, uuid.UUID, time.Time) (*models.UserCredentials, error)); ok {
		return rf(ctx, oldPassword, newPassword, id, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, uuid.UUID, time.Time) *models.UserCredentials); ok {
		r0 = rf(ctx, oldPassword, newPassword, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserCredentials)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, oldPassword, newPassword, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type MockService_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - oldPassword string
//   - newPassword string
//   - id uuid.UUID
//   - now time.Time
func (_e *MockService_Expecter) UpdatePassword(ctx interface{}, oldPassword interface{}, newPassword interface{}, id interface{}, now interface{}) *MockService_UpdatePassword_Call {
	return &MockService_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", ctx, oldPassword, newPassword, id, now)}
}

func (_c *MockService_UpdatePassword_Call) Run(run func(ctx context.Context, oldPassword string, newPassword string, id uuid.UUID, now time.Time)) *MockService_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(uuid.UUID), args[4].(time.Time))
	})
	return _c
}

func (_c *MockService_UpdatePassword_Call) Return(_a0 *models.UserCredentials, _a1 error) *MockService_UpdatePassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_UpdatePassword_Call) RunAndReturn(run func(context.Context, string, string, uuid.UUID, time.Time) (*models.UserCredentials, error)) *MockService_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateEmail provides a mock function with given fields: ctx, id, code, now
func (_m *MockService) ValidateEmail(ctx context.Context, id uuid.UUID, code string, now time.Time) (*models.UserCredentials, error) {
	ret := _m.Called(ctx, id, code, now)

	var r0 *models.UserCredentials
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, time.Time) (*models.UserCredentials, error)); ok {
		return rf(ctx, id, code, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, time.Time) *models.UserCredentials); ok {
		r0 = rf(ctx, id, code, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserCredentials)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, time.Time) error); ok {
		r1 = rf(ctx, id, code, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_ValidateEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateEmail'
type MockService_ValidateEmail_Call struct {
	*mock.Call
}

// ValidateEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - code string
//   - now time.Time
func (_e *MockService_Expecter) ValidateEmail(ctx interface{}, id interface{}, code interface{}, now interface{}) *MockService_ValidateEmail_Call {
	return &MockService_ValidateEmail_Call{Call: _e.mock.On("ValidateEmail", ctx, id, code, now)}
}

func (_c *MockService_ValidateEmail_Call) Run(run func(ctx context.Context, id uuid.UUID, code string, now time.Time)) *MockService_ValidateEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(time.Time))
	})
	return _c
}

func (_c *MockService_ValidateEmail_Call) Return(_a0 *models.UserCredentials, _a1 error) *MockService_ValidateEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_ValidateEmail_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, time.Time) (*models.UserCredentials, error)) *MockService_ValidateEmail_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateNewEmail provides a mock function with given fields: ctx, id, code, now
func (_m *MockService) ValidateNewEmail(ctx context.Context, id uuid.UUID, code string, now time.Time) (*models.UserCredentials, error) {
	ret := _m.Called(ctx, id, code, now)

	var r0 *models.UserCredentials
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, time.Time) (*models.UserCredentials, error)); ok {
		return rf(ctx, id, code, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, time.Time) *models.UserCredentials); ok {
		r0 = rf(ctx, id, code, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserCredentials)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, time.Time) error); ok {
		r1 = rf(ctx, id, code, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_ValidateNewEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateNewEmail'
type MockService_ValidateNewEmail_Call struct {
	*mock.Call
}

// ValidateNewEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - code string
//   - now time.Time
func (_e *MockService_Expecter) ValidateNewEmail(ctx interface{}, id interface{}, code interface{}, now interface{}) *MockService_ValidateNewEmail_Call {
	return &MockService_ValidateNewEmail_Call{Call: _e.mock.On("ValidateNewEmail", ctx, id, code, now)}
}

func (_c *MockService_ValidateNewEmail_Call) Run(run func(ctx context.Context, id uuid.UUID, code string, now time.Time)) *MockService_ValidateNewEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(time.Time))
	})
	return _c
}

func (_c *MockService_ValidateNewEmail_Call) Return(_a0 *models.UserCredentials, _a1 error) *MockService_ValidateNewEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_ValidateNewEmail_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, time.Time) (*models.UserCredentials, error)) *MockService_ValidateNewEmail_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockService(t mockConstructorTestingTNewMockService) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
