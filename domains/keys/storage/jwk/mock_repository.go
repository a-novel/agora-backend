// Code generated by mockery v2.20.0. DO NOT EDIT.

package jwk_storage

import (
	context "context"
	ed25519 "crypto/ed25519"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, name
func (_m *MockRepository) Delete(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockRepository_Expecter) Delete(ctx interface{}, name interface{}) *MockRepository_Delete_Call {
	return &MockRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, name)}
}

func (_c *MockRepository_Delete_Call) Run(run func(ctx context.Context, name string)) *MockRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_Delete_Call) Return(_a0 error) *MockRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockRepository) List(ctx context.Context) ([]*Model, error) {
	ret := _m.Called(ctx)

	var r0 []*Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*Model, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*Model); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) List(ctx interface{}) *MockRepository_List_Call {
	return &MockRepository_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockRepository_List_Call) Run(run func(ctx context.Context)) *MockRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRepository_List_Call) Return(_a0 []*Model, _a1 error) *MockRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_List_Call) RunAndReturn(run func(context.Context) ([]*Model, error)) *MockRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: ctx, name
func (_m *MockRepository) Read(ctx context.Context, name string) (*Model, error) {
	ret := _m.Called(ctx, name)

	var r0 *Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Model, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Model); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockRepository_Expecter) Read(ctx interface{}, name interface{}) *MockRepository_Read_Call {
	return &MockRepository_Read_Call{Call: _e.mock.On("Read", ctx, name)}
}

func (_c *MockRepository_Read_Call) Run(run func(ctx context.Context, name string)) *MockRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_Read_Call) Return(_a0 *Model, _a1 error) *MockRepository_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_Read_Call) RunAndReturn(run func(context.Context, string) (*Model, error)) *MockRepository_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: ctx, key, name
func (_m *MockRepository) Write(ctx context.Context, key ed25519.PrivateKey, name string) (*Model, error) {
	ret := _m.Called(ctx, key, name)

	var r0 *Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ed25519.PrivateKey, string) (*Model, error)); ok {
		return rf(ctx, key, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ed25519.PrivateKey, string) *Model); ok {
		r0 = rf(ctx, key, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ed25519.PrivateKey, string) error); ok {
		r1 = rf(ctx, key, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockRepository_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - ctx context.Context
//   - key ed25519.PrivateKey
//   - name string
func (_e *MockRepository_Expecter) Write(ctx interface{}, key interface{}, name interface{}) *MockRepository_Write_Call {
	return &MockRepository_Write_Call{Call: _e.mock.On("Write", ctx, key, name)}
}

func (_c *MockRepository_Write_Call) Run(run func(ctx context.Context, key ed25519.PrivateKey, name string)) *MockRepository_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ed25519.PrivateKey), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_Write_Call) Return(_a0 *Model, _a1 error) *MockRepository_Write_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_Write_Call) RunAndReturn(run func(context.Context, ed25519.PrivateKey, string) (*Model, error)) *MockRepository_Write_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
