// Code generated by mockery v2.20.0. DO NOT EDIT.

package jwk_service

import (
	context "context"
	ed25519 "crypto/ed25519"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// GetPrivate provides a mock function with given fields:
func (_m *MockService) GetPrivate() ed25519.PrivateKey {
	ret := _m.Called()

	var r0 ed25519.PrivateKey
	if rf, ok := ret.Get(0).(func() ed25519.PrivateKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ed25519.PrivateKey)
		}
	}

	return r0
}

// MockService_GetPrivate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrivate'
type MockService_GetPrivate_Call struct {
	*mock.Call
}

// GetPrivate is a helper method to define mock.On call
func (_e *MockService_Expecter) GetPrivate() *MockService_GetPrivate_Call {
	return &MockService_GetPrivate_Call{Call: _e.mock.On("GetPrivate")}
}

func (_c *MockService_GetPrivate_Call) Run(run func()) *MockService_GetPrivate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_GetPrivate_Call) Return(_a0 ed25519.PrivateKey) *MockService_GetPrivate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_GetPrivate_Call) RunAndReturn(run func() ed25519.PrivateKey) *MockService_GetPrivate_Call {
	_c.Call.Return(run)
	return _c
}

// ListPublic provides a mock function with given fields:
func (_m *MockService) ListPublic() []ed25519.PublicKey {
	ret := _m.Called()

	var r0 []ed25519.PublicKey
	if rf, ok := ret.Get(0).(func() []ed25519.PublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ed25519.PublicKey)
		}
	}

	return r0
}

// MockService_ListPublic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPublic'
type MockService_ListPublic_Call struct {
	*mock.Call
}

// ListPublic is a helper method to define mock.On call
func (_e *MockService_Expecter) ListPublic() *MockService_ListPublic_Call {
	return &MockService_ListPublic_Call{Call: _e.mock.On("ListPublic")}
}

func (_c *MockService_ListPublic_Call) Run(run func()) *MockService_ListPublic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_ListPublic_Call) Return(_a0 []ed25519.PublicKey) *MockService_ListPublic_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_ListPublic_Call) RunAndReturn(run func() []ed25519.PublicKey) *MockService_ListPublic_Call {
	_c.Call.Return(run)
	return _c
}

// ReadOnly provides a mock function with given fields:
func (_m *MockService) ReadOnly() ServiceCached {
	ret := _m.Called()

	var r0 ServiceCached
	if rf, ok := ret.Get(0).(func() ServiceCached); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ServiceCached)
		}
	}

	return r0
}

// MockService_ReadOnly_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadOnly'
type MockService_ReadOnly_Call struct {
	*mock.Call
}

// ReadOnly is a helper method to define mock.On call
func (_e *MockService_Expecter) ReadOnly() *MockService_ReadOnly_Call {
	return &MockService_ReadOnly_Call{Call: _e.mock.On("ReadOnly")}
}

func (_c *MockService_ReadOnly_Call) Run(run func()) *MockService_ReadOnly_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_ReadOnly_Call) Return(_a0 ServiceCached) *MockService_ReadOnly_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_ReadOnly_Call) RunAndReturn(run func() ServiceCached) *MockService_ReadOnly_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function with given fields: ctx, key, id, maxBackups
func (_m *MockService) Refresh(ctx context.Context, key ed25519.PrivateKey, id uuid.UUID, maxBackups int) error {
	ret := _m.Called(ctx, key, id, maxBackups)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ed25519.PrivateKey, uuid.UUID, int) error); ok {
		r0 = rf(ctx, key, id, maxBackups)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type MockService_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - ctx context.Context
//   - key ed25519.PrivateKey
//   - id uuid.UUID
//   - maxBackups int
func (_e *MockService_Expecter) Refresh(ctx interface{}, key interface{}, id interface{}, maxBackups interface{}) *MockService_Refresh_Call {
	return &MockService_Refresh_Call{Call: _e.mock.On("Refresh", ctx, key, id, maxBackups)}
}

func (_c *MockService_Refresh_Call) Run(run func(ctx context.Context, key ed25519.PrivateKey, id uuid.UUID, maxBackups int)) *MockService_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ed25519.PrivateKey), args[2].(uuid.UUID), args[3].(int))
	})
	return _c
}

func (_c *MockService_Refresh_Call) Return(_a0 error) *MockService_Refresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Refresh_Call) RunAndReturn(run func(context.Context, ed25519.PrivateKey, uuid.UUID, int) error) *MockService_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshCache provides a mock function with given fields: ctx
func (_m *MockService) RefreshCache(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_RefreshCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshCache'
type MockService_RefreshCache_Call struct {
	*mock.Call
}

// RefreshCache is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) RefreshCache(ctx interface{}) *MockService_RefreshCache_Call {
	return &MockService_RefreshCache_Call{Call: _e.mock.On("RefreshCache", ctx)}
}

func (_c *MockService_RefreshCache_Call) Run(run func(ctx context.Context)) *MockService_RefreshCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockService_RefreshCache_Call) Return(_a0 error) *MockService_RefreshCache_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_RefreshCache_Call) RunAndReturn(run func(context.Context) error) *MockService_RefreshCache_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockService(t mockConstructorTestingTNewMockService) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
