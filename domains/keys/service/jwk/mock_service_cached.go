// Code generated by mockery v2.20.0. DO NOT EDIT.

package jwk_service

import (
	context "context"
	ed25519 "crypto/ed25519"

	mock "github.com/stretchr/testify/mock"
)

// MockServiceCached is an autogenerated mock type for the ServiceCached type
type MockServiceCached struct {
	mock.Mock
}

type MockServiceCached_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceCached) EXPECT() *MockServiceCached_Expecter {
	return &MockServiceCached_Expecter{mock: &_m.Mock}
}

// GetPrivate provides a mock function with given fields:
func (_m *MockServiceCached) GetPrivate() ed25519.PrivateKey {
	ret := _m.Called()

	var r0 ed25519.PrivateKey
	if rf, ok := ret.Get(0).(func() ed25519.PrivateKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ed25519.PrivateKey)
		}
	}

	return r0
}

// MockServiceCached_GetPrivate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrivate'
type MockServiceCached_GetPrivate_Call struct {
	*mock.Call
}

// GetPrivate is a helper method to define mock.On call
func (_e *MockServiceCached_Expecter) GetPrivate() *MockServiceCached_GetPrivate_Call {
	return &MockServiceCached_GetPrivate_Call{Call: _e.mock.On("GetPrivate")}
}

func (_c *MockServiceCached_GetPrivate_Call) Run(run func()) *MockServiceCached_GetPrivate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceCached_GetPrivate_Call) Return(_a0 ed25519.PrivateKey) *MockServiceCached_GetPrivate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceCached_GetPrivate_Call) RunAndReturn(run func() ed25519.PrivateKey) *MockServiceCached_GetPrivate_Call {
	_c.Call.Return(run)
	return _c
}

// ListPublic provides a mock function with given fields:
func (_m *MockServiceCached) ListPublic() []ed25519.PublicKey {
	ret := _m.Called()

	var r0 []ed25519.PublicKey
	if rf, ok := ret.Get(0).(func() []ed25519.PublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ed25519.PublicKey)
		}
	}

	return r0
}

// MockServiceCached_ListPublic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPublic'
type MockServiceCached_ListPublic_Call struct {
	*mock.Call
}

// ListPublic is a helper method to define mock.On call
func (_e *MockServiceCached_Expecter) ListPublic() *MockServiceCached_ListPublic_Call {
	return &MockServiceCached_ListPublic_Call{Call: _e.mock.On("ListPublic")}
}

func (_c *MockServiceCached_ListPublic_Call) Run(run func()) *MockServiceCached_ListPublic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceCached_ListPublic_Call) Return(_a0 []ed25519.PublicKey) *MockServiceCached_ListPublic_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceCached_ListPublic_Call) RunAndReturn(run func() []ed25519.PublicKey) *MockServiceCached_ListPublic_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshCache provides a mock function with given fields: ctx
func (_m *MockServiceCached) RefreshCache(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServiceCached_RefreshCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshCache'
type MockServiceCached_RefreshCache_Call struct {
	*mock.Call
}

// RefreshCache is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockServiceCached_Expecter) RefreshCache(ctx interface{}) *MockServiceCached_RefreshCache_Call {
	return &MockServiceCached_RefreshCache_Call{Call: _e.mock.On("RefreshCache", ctx)}
}

func (_c *MockServiceCached_RefreshCache_Call) Run(run func(ctx context.Context)) *MockServiceCached_RefreshCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockServiceCached_RefreshCache_Call) Return(_a0 error) *MockServiceCached_RefreshCache_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceCached_RefreshCache_Call) RunAndReturn(run func(context.Context) error) *MockServiceCached_RefreshCache_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockServiceCached interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockServiceCached creates a new instance of MockServiceCached. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockServiceCached(t mockConstructorTestingTNewMockServiceCached) *MockServiceCached {
	mock := &MockServiceCached{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
